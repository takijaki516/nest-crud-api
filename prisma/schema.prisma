// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id       String @id @default(cuid())
  username String
  email    String @unique
  password String
  role     Role   @default(USER)

  addresses Address[]
  cartItems CartItem[]
  orders    Order[]
  products  Product[]

  refreshToken RefreshToken? // NOTE: One-to-one relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id    String @id @default(cuid())
  token String
  // expiresAt DateTime

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Address {
  id String @id @default(cuid())

  lineOne String
  lineTwo String?
  city    String
  country String
  zipcode String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Decimal
  tags        String
  imageId     String?

  // NOTE: Only ADMIN can create products
  userId String
  users  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  cartItems CartItem[]
  orders    OrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// TODO: add category
// model Category {
// }

model CartItem {
  id       String @id @default(cuid())
  quantity Int

  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id      String           @id @default(cuid())
  amount  Decimal
  address String
  status  OrderEventStatus @default(PENDING)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  products OrderProduct[]
  events   OrderEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  id       String @id @default(cuid())
  quantity Int

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderEvent {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  status OrderEventStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
